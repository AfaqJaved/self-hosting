services:
  teable:
    image: ghcr.io/teableio/teable-ee:latest
    restart: always
    #ports: no need since using npm (nginx proxy manager)
    #  - '3000:3000'
    volumes:
      - teable-data:/app/.assets:rw
    #env_file:
    #  - .env
    environment:
      - NEXT_ENV_IMAGES_ALL_REMOTE=true
      - PORT=${PORT}
      - LOG_LEVEL=debug
      - SECRET_KEY=${SECRET_KEY}
      - PUBLIC_ORIGIN=${PUBLIC_ORIGIN}
      - PRISMA_DATABASE_URL=${PRISMA_DATABASE_URL}
      - BACKEND_STORAGE_S3_REGION=${BACKEND_STORAGE_S3_REGION}
      - BACKEND_STORAGE_PROVIDER=${BACKEND_STORAGE_PROVIDER}
      - BACKEND_STORAGE_S3_ENDPOINT=${BACKEND_STORAGE_S3_ENDPOINT}
      - BACKEND_STORAGE_S3_ACCESS_KEY=${BACKEND_STORAGE_S3_ACCESS_KEY}
      - BACKEND_STORAGE_S3_SECRET_KEY=${BACKEND_STORAGE_S3_SECRET_KEY}
      - BACKEND_STORAGE_MINIO_ENDPOINT=${BACKEND_STORAGE_MINIO_ENDPOINT}
      - BACKEND_STORAGE_MINIO_ACCESS_KEY=${BACKEND_STORAGE_MINIO_ACCESS_KEY}
      - BACKEND_STORAGE_MINIO_SECRET_KEY=${BACKEND_STORAGE_MINIO_SECRET_KEY}
      - BACKEND_CACHE_PROVIDER=${BACKEND_CACHE_PROVIDER}
      - BACKEND_CACHE_REDIS_URI=${BACKEND_CACHE_REDIS_URI}
      - BACKEND_MAIL_HOST=${BACKEND_MAIL_HOST}
      - BACKEND_MAIL_PORT=${BACKEND_MAIL_PORT}
      - BACKEND_MAIL_SECURE=${BACKEND_MAIL_SECURE}
      - BACKEND_MAIL_SENDER=${BACKEND_MAIL_SENDER}
      - BACKEND_MAIL_SENDER_NAME=${BACKEND_MAIL_SENDER_NAME}
      - BACKEND_MAIL_AUTH_USER=${BACKEND_MAIL_AUTH_USER}
      - BACKEND_MAIL_AUTH_PASS=${BACKEND_MAIL_AUTH_PASS}
    networks:
      - teable
      - shared_postgres
      - shared_redis
      - nginx
    #depends_on:
    #  teable-db:
    #    condition: service_healthy
    #  teable-cache:
    #    condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3002/health']
      start_period: 5s
      interval: 5s
      timeout: 3s
      retries: 3

  # if you need postgres
  # teable-db:
  #   image: postgres:15.4
  #   restart: always
  #   ports:
  #     - '42345:5432'
  #   volumes:
  #     - teable-db:/var/lib/postgresql/data:rw
  #   environment:
  #     - POSTGRES_DB=${POSTGRES_DB}
  #     - POSTGRES_USER=${POSTGRES_USER}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #   networks:
  #     - teable
  #   healthcheck:
  #     test: ['CMD-SHELL', "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
  #     interval: 10s
  #     timeout: 3s
  #     retries: 3


  # if you need redis
  # teable-cache:
  #   image: redis:7.2.4
  #   restart: always
  #   expose:
  #     - '6379'
  #   volumes:
  #     - teable-cache:/data:rw
  #   networks:
  #     - teable
  #   command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
  #   healthcheck:
  #     test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
  #     interval: 10s
  #     timeout: 3s
  #     retries: 3

networks:
  teable:
    name: teable-network
  nginx:
    external: true
  shared_redis:
    external: true
  shared_postgres:
    external: true

volumes:
  teable-data: {}